import telebot
from telebot.types import CallbackQuery, Message

from keyboards.image_kb import get_options_keyboard, get_pixel_keyboard, get_mirror_keyboard
from settings import ASCII_TEXT, WELCOME_TEXT, IMAGE_TEXT, user_states, ASCII_CHARS, PIXEL_DICT, MIRROR_DICT
from utilities.processing_img import (pixelate_and_send, solarize_and_send, ascii_and_send, invert_and_send,
                                      mirror_and_send, heatmap_and_send, grayscale_and_send, heatmap_v2_and_send,
                                      sticker_and_send)

from create_bot.create_bot import bot


def callback_query(call: CallbackQuery):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.callback_query_handler(func=lambda call: True)
    """
    try:
        if call.data == 'pixelate':
            bot.send_message(call.message.chat.id, 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–∏–∫—Å–µ–ª—è üëá', parse_mode='HTML',
                             reply_markup=get_pixel_keyboard())
        elif call.data == 'mirror':
            bot.send_message(call.message.chat.id, 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Ä–∞–∂–µ–Ω–∏—è üëá', parse_mode='HTML',
                             reply_markup=get_mirror_keyboard())
        elif call.data == 'solarize':
            bot.answer_callback_query(call.id, '–°–æ–ª—è—Ä–∏–∑–∞—Ü–∏—è –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...')
            solarize_and_send(call.message, bot)
        elif call.data == 'ascii':
            msg = bot.send_message(call.message.chat.id, ASCII_TEXT, parse_mode='HTML')
            bot.register_next_step_handler(msg, ascii_step2, call, bot)
        elif call.data == 'invert':
            bot.answer_callback_query(call.id, '–ò–Ω–≤–µ—Ä—Å–∏—è —Ü–≤–µ—Ç–æ–≤ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...')
            invert_and_send(call.message, bot)
        elif call.data == 'heatmap':
            bot.answer_callback_query(call.id, '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É...')
            heatmap_and_send(call.message, bot)
        elif call.data == 'heatmap_v2':
            bot.answer_callback_query(call.id, '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É...')
            heatmap_v2_and_send(call.message, bot)
        elif call.data == 'grayscale':
            bot.answer_callback_query(call.id, '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ...')
            grayscale_and_send(call.message, bot)
        elif call.data == 'sticker':
            bot.answer_callback_query(call.id, '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞...')
            sticker_and_send(call.message, bot)
    except Exception as er:
        bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞.')
        raise


def pixel_query(call: CallbackQuery):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–∏–∫—Å–µ–ª—è
    """
    try:
        bot.answer_callback_query(call.id, '–ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...')
        # bot.delete_message(call.message.chat.id, call.message.id)
        pixelate_and_send(call.message, bot, PIXEL_DICT[call.data])
    except Exception as er:
        bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞.')


def mirror_query(call: CallbackQuery):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        bot.answer_callback_query(call.id, '–û—Ç—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...')
        # bot.delete_message(call.message.chat.id, call.message.id)
        mirror_and_send(call.message, bot, int(call.data[2:]))
    except Exception as er:
        bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞.')


def ascii_step2(message: Message, call: CallbackQuery, bot: telebot.TeleBot):
    """
    –®–∞–≥ 2: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è ASCII-–∞—Ä—Ç–∞.
    """
    bot.send_message(call.message.chat.id, '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç ASCII...')

    if len(message.text) < 2:
        ascii_ch = ASCII_CHARS
    else:
        ascii_ch = message.text
    user_states[call.message.chat.id]['ascii'] = ascii_ch
    ascii_and_send(call, bot)


def send_welcome(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    bot.message_handler(commands=['start', 'help'])
    """
    bot.reply_to(message, WELCOME_TEXT, parse_mode='HTML')


def handle_photo(message: Message):
    """
    –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
    bot.message_handler(content_types=['photo'])
    """
    bot.reply_to(message, IMAGE_TEXT, reply_markup=get_options_keyboard())
    user_states[message.chat.id] = {'photo': message.photo[-1].file_id}
